# шаг 3.4.2

""" Классические фикстуры (fixtures).

Важной составляющей в использовании PyTest является концепция фикстур. 
Фикстуры в контексте PyTest — это вспомогательные функции для наших тестов, которые не являются частью тестового сценария.

Назначение фикстур может быть самым разным. 
Одно из распространенных применений фикстур — это подготовка тестового окружения и очистка тестового 
окружения и данных после завершения теста. Но, вообще говоря, фикстуры можно использовать для самых разных целей: 
для подключения к базе данных, с которой работают тесты, 
создания тестовых файлов или подготовки данных в текущем окружении с помощью API-методов.

Классический способ работы с фикстурами — создание setup- и teardown-методов в файле с тестами.

Можно создавать фикстуры для модулей, классов и отдельных функций. 
Давайте попробуем написать фикстуру для инициализации браузера, который мы затем сможем использовать в наших тестах. 
После окончания тестов мы будем автоматически закрывать браузер с помощью команды browser.quit(), 
чтобы в нашей системе не оказалось множество открытых окон браузера. 
Вынесем инициализацию и закрытие браузера в фикстуры, чтобы не писать этот код для каждого теста.

Будем сразу объединять наши тесты в тест-сьюты, роль тест-сьюта будут играть классы, в которых мы будем хранить наши тесты.

Рассмотрим два примера: создание экземпляра браузера и его закрытие только один раз для всех тестов первого тест-сьюта 
и создание браузера для каждого теста во втором тест-сьюте. 
Сохраните следующий код в файл test_fixture1.py и запустите его с помощью PyTest. 
Не забудьте указать параметр -s, чтобы увидеть текст, который выводится командой print():
pytest -s test_fixture1.py

В консоли видим:
collected 4 items

test_fixture1.py
start browser for test suite 1..

DevTools listening on ws://127.0.0.1:64404/devtools/browser/a337be93-4e9e-4df8-a1f8-41d8291f4291
start test link 1
.start test basket 1
.quit browser for test suite 1..
start browser for test 2..

DevTools listening on ws://127.0.0.1:64424/devtools/browser/c73d7a1c-62bf-406e-a75d-48dfa8d6486c
start test link 2
.quit browser for test 2..
start browser for test 2..

DevTools listening on ws://127.0.0.1:64445/devtools/browser/7a785780-cfe0-4555-904d-6f995e5a7505
start test basket 2
.quit browser for test 2..
=== 4 passed in 27.52s =====

Мы видим, что в первом тест-сьюте браузер запустился один раз, а во втором — два раза.

Данные и кэш, оставшиеся от запуска предыдущего теста, могут влиять на результаты выполнения следующего теста, 
поэтому лучше всего запускать отдельный браузер для каждого теста, чтобы тесты были стабильнее. 
К тому же если вдруг браузер зависнет в одном тесте, то другие тесты не пострадают, если они запускаются каждый в собственном браузере.

Минусы запуска браузера на каждый тест: каждый запуск и закрытие браузера занимают время, 
поэтому тесты будут идти дольше. Возможно, вы захотите оптимизировать время прогона тестов, 
но лучше это делать с помощью других инструментов, которые мы разберём в дальнейшем.

Обычно такие фикстуры переезжают вместе с тестами, написанными с помощью unittest, 
и приходится их поддерживать, но сейчас все пишут более гибкие фикстуры @pytest.fixture, которые мы рассмотрим в следующем шаге.  """

# шаг 3.4.3

""" Фикстуры, возвращающие значение.

Мы рассмотрели базовый подход к созданию фикстур, когда тестовые данные задаются и очищаются в setup и teardown методах. 
PyTest предлагает продвинутый подход к фикстурам, когда фикстуры можно задавать глобально, 
передавать их в тестовые методы как параметры, а также имеет набор встроенных фикстур. 
Это более гибкий и удобный способ работы со вспомогательными функциями, и сейчас вы сами увидите почему. 

Возвращаемое значение

Фикстуры могут возвращать значение, которое затем можно использовать в тестах. 
Давайте перепишем наш предыдущий пример с использованием PyTest фикстур. 
Мы создадим фикстуру browser, которая будет создавать объект WebDriver. 
Этот объект мы сможем использовать в тестах для взаимодействия с браузером. 
Для этого мы напишем метод browser и укажем, что он является фикстурой с помощью декоратора @pytest.fixture. 
После этого мы можем вызывать фикстуру в тестах, передав ее как параметр. 
По умолчанию фикстура будет создаваться для каждого тестового метода, то есть для каждого теста запустится свой экземпляр браузера.
Запишем его в файл test_fixture2.py и запустим его с помощью PyTest: pytest -s -v test_fixture2.py """